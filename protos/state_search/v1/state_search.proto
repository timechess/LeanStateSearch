syntax = "proto3";

package state_search.v1;

// A theorem from Mathlib
message Theorem {
  string id = 1;
  string name = 2;
  string code = 3;
  string rev = 4;
  string module = 5;
  string formal_type = 6;
}

// Service for searching.
service LeanStateSearchService {
  // Get all existing revs in database.
  rpc GetAllRev(GetAllRevRequest) returns (GetAllRevResponse);
  // Search theorem according to the query.
  rpc SearchTheorem(SearchTheoremRequest) returns (SearchTheoremResponse);
  // Collect feedbacks from user.
  rpc Feedback(FeedbackRequest) returns (FeedbackResponse);
  // Collect click events from user.
  rpc Click(ClickRequest) returns (ClickResponse);
  rpc Call(CallRequest) returns (CallResponse);
}

message GetAllRevRequest {}

message GetAllRevResponse {
  repeated string revs = 1;
}

message SearchTheoremRequest {
  string query = 1;
  int32 nresult = 2;
  string rev = 3;
}

message SearchTheoremResponse {
  repeated Theorem results = 1;
}

message FeedbackRequest {
  string query = 1;
  string theorem_id = 2;
  bool relevant = 3;
  bool update = 4;
  int32 rank = 5;
}

message FeedbackResponse {}

message ClickRequest {
  string query = 1;
  string theorem_id = 2;
  int32 rank = 3;
}

message ClickResponse {}

message CallRequest {
  int32 call_type = 1;
}

message CallResponse {}

service LeanGraphService {
  rpc GetDependencyNodesAndEdges(GetDependencyNodesAndEdgesRequest) returns (GetDependencyNodesAndEdgesResponse);
  rpc GetDependentNodesAndEdges(GetDependentNodesAndEdgesRequest) returns (GetDependentNodesAndEdgesResponse);
}

message LeanNode {
  string name = 1;
  string const_category = 2;
  string const_type = 3;
  string module = 4;
  string doc_string = 5;
  string informal_name = 6;
  string informal_statement = 7;
}

message LeanEdge {
  string id = 1;
  string source = 2;
  string target = 3;
  string edge_type = 4;
}

message GetDependencyNodesAndEdgesRequest {
  string name = 1;
}

message GetDependencyNodesAndEdgesResponse {
  repeated LeanNode nodes = 1;
  repeated LeanEdge edges = 2;
  SamplingInfo sampling_info = 3;
}

message GetDependentNodesAndEdgesRequest {
  string name = 1;
}

message GetDependentNodesAndEdgesResponse {
  repeated LeanNode nodes = 1;
  repeated LeanEdge edges = 2;
  SamplingInfo sampling_info = 3;
}

message SamplingInfo {
  bool was_sampled = 1;
  int32 original_node_count = 2;
  int32 sampled_node_count = 3;
}
